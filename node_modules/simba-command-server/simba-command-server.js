/*
 * simba server command
 * */
exports.name = 'server';
exports.usage = '[options]';
exports.desc = '启动本地web服务及集成开发环境';
exports.register = function (commander) {

	var simba = require('simba-kernel'),
		gulp = require('gulp'),
		fs = require('fs'),
		runSequence = require('run-sequence'),
		plumber = require('gulp-plumber'),
		less = require("gulp-less"),
		stylus = require('gulp-stylus'),
		//lessHint = require("gulp-lesshint"),
		//jsHint = require('gulp-jshint'),
		connect = require('gulp-connect'),
		strReplace = require('gulp-replace'),
		cache = require('gulp-cached'),
		postcss  = require('gulp-postcss'),
		autoprefixer = require('autoprefixer'),
		include = require('gulp-html-tag-include'),
		//browserSync = require('browser-sync').create(),
		//ratelimit = require('ratelimit'),
		ssi = require("ssi"),
		root = process.cwd()+'/src';
		require('shelljs/global');
		require('es6-promise').polyfill();
	// output version info
	var first = process.argv[3];

	if (first === '-v' || first === '--version') {
		simba.util.version(__dirname + '/package.json');
		process.exit(0);
	}

	function scan(host, start, end, callback) { //烧苗重复端口
		var net = require('net');
		var count = end - start;
		var result = [];
		console.time('port scan time');

		for (var i = start; i <= end; i++) {
			var item = net.connect({
					host: host,
					port: i
				},
				function(i) {
					return function() {
						result.push(i);
						this.destroy();
					};
				}(i)
			);

			item.on('error', function(err) {
				if (err.errno == 'ECONNREFUSED') {
					this.destroy();
				}
			});

			item.on('close', function() {
				if (!count--) {
					console.timeEnd('port scan time');
					callback(result);
				}
			});
		}
	}
	if(first == 'mock'){
		exec('gulp mockServer');
		process.exit(0);
	}

	var serverConfig = simba.util.getConfig(root+'/config.json').server,
		PATH = {
			HTML : 'src/**/*.html',
			LESS : 'src/**/*.less',
			CSS : 'src/**/*.css',
			STYLUS : 'src/**/*.styl',
			JS : ['src/**/*.js','!src/**/less.min.js'],
			IMG: 'src/**/*.{png,jpg,jpeg,gif,ico,webp,cur}'
		};

	var localServerPort = parseInt(serverConfig.localServerPort),
		liveReloadPort = null;
	scan('localhost', localServerPort, localServerPort+10, function(result) {
		liveReloadPort = 32729;
		if(result.length>0){
			for (var i = 0; i < result.length; i++) {
				console.log('端口:' + result[i]+'已有项目占用。');
				console.log('liveReloadPort端口:' + result[i]+'已有项目占用。');
			}
			liveReloadPort = liveReloadPort+parseInt(result[result.length-1])+1;
			console.log(result[result.length-1]+1);
			console.log(liveReloadPort);
			localServerPort = parseInt(result[result.length-1])+1;

			gulp.run('server');
		}else{
			liveReloadPort = liveReloadPort+localServerPort;
			gulp.run('server');
		}

	});

	gulp.task('image', function () {
		return gulp.src(PATH.IMG)
			.pipe(cache('imging'))
			.pipe(gulp.dest('dist'));
	})

	gulp.task('webserver', function() {
		var liveReload = {port:liveReloadPort};

		connect.server({
			root: process.cwd(),
			port: localServerPort,
			fallback:'',
			livereload: liveReload,
			middleware: function (connect, opt) {
				var app = connect(),
					middlewares = [];
				app.use("/",function (req, res, next) {
					next();
				})
				app.use(function (req, res, next) {
					if(req.url.indexOf('mock') != -1) {
						console.log("go mock");
						res.setHeader( "Content-Type", "text/html; charset=UTF-8");
						res.setHeader("Access-Control-Allow-Origin", "*");//writeHeader不可以
						res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
						res.setHeader("Access-Control-Allow-Methods","GET,POST,OPTIONS");
						//res.setHeader("X-Powered-By",' 3.2.1')
						//res.setHeader("Content-Type", "application/json;charset=utf-8");
					}
					next();
				});
				return middlewares
			}
		});
		if(serverConfig.isOpenAuto){
			simba.util.openURL('http://localhost:'+localServerPort);
		}
	});
	gulp.task("less", function() {
		return gulp.src(PATH.LESS)
			.pipe(plumber({
				errorHandler: function(err){
					console.log(err);
				}
			}))//处理出现异常并不终止watch事件,并提示我们出现了错误
			//.pipe(cache('lessing'))
			//.pipe(lessHint({
			//	// Options
			//}))
			//.pipe(lessHint.reporter()) // Or another custom reporter
			.pipe(less())
			.pipe(postcss([ autoprefixer({ browsers: ['last 5 versions'] }) ]))
			.pipe(gulp.dest('dist'))
	});

	gulp.task("stylus", function () {
		return gulp.src(PATH.STYLUS)
			.pipe(cache('stylusing'))
			.pipe(stylus())
			.pipe(postcss([ autoprefixer({ browsers: ['last 5 versions'] }) ]))
			.pipe(gulp.dest('dist'))
			.pipe(connect.reload());
	});

	gulp.task('js', function () {
		return gulp.src(PATH.JS)
			.pipe(cache('jsing'))
			//.pipe(jsHint())
			//.pipe(jsHint.reporter('default'))
			.pipe(gulp.dest('dist'))
	})
	
	gulp.task("html", function () {
		return gulp.src(PATH.HTML)
			.pipe(cache('htmling'))
			//.pipe(include())
			.pipe(strReplace(/\.less|sheet\/less|<script.*?less\.min\.js.*?<\/script>|\.styl/gi, function(str){
				if(str == 'sheet/less'){
					str = 'sheet';
				}else if(str == '.less' || str == '.styl'){
					str = '.css';
				}else{
					str = '';
				}
				return str
			}))
			.pipe(gulp.dest('dist'))
			.pipe(connect.reload());
	})

	gulp.task("server",['webserver','toDist','watch'],function(){
	})

	gulp.task("css", function () {
		return gulp.src(PATH.CSS)
			.pipe(cache('cssing'))
			.pipe(postcss([ autoprefixer({ browsers: ['last 5 versions'] }) ]))
			.pipe(gulp.dest('dist'))
	})

	gulp.task("ssi", function () {
		var include = function(){
			var inputDirectory = process.cwd()+'/dist';
			var outputDirectory = process.cwd()+'/dist';
			var matcher = "/**/*.html";
			var includes = new ssi(inputDirectory, outputDirectory, matcher);
			includes.compile();
		}
		return include();
	});
	gulp.task("toDist",function(done){
		runSequence(
			['js','less','image'],
			['stylus'],
			['css'],
			['html'],
			['ssi'],
			done);
	})
	gulp.task("conectReload", function () {
		return gulp.src("./")
			.pipe(connect.reload());
	})
	gulp.task("reload",function(done){
		gulp.run('toDist');
		runSequence(
			'toDist',
			'conectReload',
			done);
	})
	gulp.task("watch",function(){
		gulp.watch('src/**', function () {
			gulp.run('reload')
		})
		gulp.watch('dist/**', function () {
			gulp.run('conectReload')
		})
	})

	//simba.log.warning('开发中');
	//return false;

};