var gulp = require('gulp'),
    simba = require("../simba-kernel"),
    plumber = require('gulp-plumber'),
    less = require("gulp-less"),
    //less = require('less'),
    lessHint = require("gulp-lesshint"),
    jsHint = require('gulp-jshint');
    connect = require("gulp-connect"),
    resMinify = require("res-minify"),
    strReplace = require('gulp-replace'),
    cache = require('gulp-cached'),
    imagemin = require('gulp-imagemin'),
    pngquant = require('imagemin-pngquant'),
    uglify = require('gulp-uglify');
    require("shelljs/global");
//var console = require("../simba-kernel/lib/newlog.js");
var localServerPort = String(process.argv[5]).substr(1),
    liveReloadPort = String(process.argv[6]).substr(1)
    apiPath = 'api';

cd(String(process.argv[3]).substr(1));
var serverConfig = simba.util.getConfig(process.cwd()+'/config.json').server,
    PATH = {
        HTML : './*.html',
        LESS : './css/*.less',
        CSS : './css/*.css',
        JS : './js/*.js',
        DIST: './dist/',
        IMG: './css/images/*.{png,jpg,gif,ico}'
    };

gulp.task('watchJson', function () {
    gulp.watch('.mock/mock.json', function () {
        console.log(change);
    });
});
gulp.task('imageMin', function () {
    gulp.src(PATH.IMG)
        .pipe(cache('imging'))
        .pipe(imagemin({
            optimizationLevel: 7,
            progressive: true,
            svgoPlugins: [{removeViewBox: false}],//不要移除svg的viewbox属性
            use: [pngquant()] //使用pngquant深度压缩png图片的imagemin插件
        }))
        .pipe(gulp.dest(PATH.DIST+'css/images'));
})

gulp.task('webserver', function() {
    var liveReload = {port:liveReloadPort};

    connect.server({
        root: process.cwd(),
        port: localServerPort,
        fallback:'',
        livereload: liveReload,
        //middleware: function (connect, opt) {
        //    var http   = require('http');
        //    var url    = require('url');
        //    var fs     = require('fs');
        //    var path   = require('path');
        //    var middleware = function(localRequest, localResponse, next){
        //        if(localRequest.url.indexOf('mock') != -1){
        //            console.log('go mock-----');
        //            var options = url.parse('http://' + localRequest.url.slice(1));
        //            console.log(options);
        //            http.request(options, function (remoteRequest) {
        //                console.log('go options');
        //                if (remoteRequest.statusCode === 200) {
        //                    localResponse.writeHead(200, {
        //                        'Content-Type': remoteRequest.headers['content-type']
        //                    });
        //                    remoteRequest.pipe(localResponse);
        //                } else {
        //                    localResponse.writeHead(remoteRequest.statusCode);
        //                    localResponse.end();
        //                }
        //            }).on('error', function(e) {
        //                console.log('go error');
        //                next();
        //            }).end();
        //        }else{
        //            console.log('not go mock-----');
        //            next()
        //        }
        //
        //    };
        //    return [middleware];
        //
        //}
        middleware: function (connect, opt) {
           var app = connect();
           app.use(function (req, res, next) {
                // 中间件
                console.log("中间件");
               if(req.url.indexOf('mock') != -1) {
                   console.log("go mock");
                   res.setHeader( "Content-Type", "text/html; charset=UTF-8");
                   res.setHeader("Access-Control-Allow-Origin", "*");//writeHeader不可以
                   res.setHeader("Access-Control-Allow-Headers", "X-Requested-With");
                   res.setHeader("Access-Control-Allow-Methods","GET,POST,OPTIONS");
                   //res.setHeader("X-Powered-By",' 3.2.1')
                   //res.setHeader("Content-Type", "application/json;charset=utf-8");
               }
               next();
           });
           return [app]
        }
    });
    if(serverConfig.isOpenAuto){
        simba.util.openURL('http://localhost:'+localServerPort);
    }
});

gulp.task("less", function() {
    gulp.src(PATH.LESS)
        .pipe(plumber({
                errorHandler: function(err){
                    console.log(err);
                }
        }))//处理出现异常并不终止watch事件,并提示我们出现了错误
        .pipe(cache('lessing'))
        .pipe(lessHint({
            // Options
        }))
        //.pipe(lessHint.reporter()) // Or another custom reporter
        .pipe(less())
        .pipe(gulp.dest(PATH.DIST+'css'))
});

gulp.task('uglify', function () {
    var uglifyVar = serverConfig.uglify;
    if (uglifyVar != null) {
        gulp.src(PATH.JS)
            .pipe(plumber({
                errorHandler: function(err){
                    console.log(err);
                }
            }))//处理出现异常并不终止watch事件,并提示我们出现了错误
            .pipe(cache('linting'))
            .pipe(strReplace(/alert\((("|'?).*?("|'?))\)|console\.log\((("|'?).*?("|'?))\)/g, ''))//删除js中多余的console.log和alert
            .pipe(jsHint())
            //.pipe(jsHint.reporter('default'))
            .pipe(uglify({
                mangle: uglifyVar.mangle,   //类型：Boolean 默认：true 是否修改变量名
                compress: uglifyVar.compress//类型：Boolean 默认：true 是否完全压缩
            }))
            .pipe(gulp.dest(PATH.DIST+'js'))
    } else {
        gulp.src(PATH.JS)
            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
            .pipe(cache('linting'))
            .pipe(strReplace(/alert\((("|'?).*?("|'?))\)|console\.log\((("|'?).*?("|'?))\)/g, ''))//删除js中多余的console.log和alert
            .pipe(jsHint())
            //.pipe(jsHint.reporter('default'))
            .pipe(gulp.dest(PATH.DIST+'js'))
    }
})

gulp.task("server",['webserver','less','toDist','watch'],function(){

})
gulp.task("toDist",function(){
    gulp.src(PATH.CSS)
        .pipe(cache('cssing'))
        .pipe(gulp.dest(PATH.DIST+'css'))
    gulp.src(PATH.HTML)
        .pipe(cache('htmling'))
        .pipe(strReplace(/\.less|sheet\/less|<script.*?less\.min\.js.*?<\/script>/gi, function(str){
            if(str == 'sheet/less'){
                str = 'sheet';
            }else if(str == '.less'){
                str = '.css';
            }else{
                str = '';
            }
            return str
        }))
        .pipe(gulp.dest(PATH.DIST))
    gulp.run("uglify");
    gulp.run("less");
    //gulp.run("imageMin");
})
gulp.task("watch",function(){
    gulp.watch([PATH.CSS,PATH.LESS,PATH.HTML,PATH.JS],function(){
        gulp.run('toDist');
        //console.log("reloadCSS");
        gulp.src("./")
            .pipe(connect.reload());
    })

})
//    cssmin = require('gulp-minify-css').3,
//    notify = require('gulp-notify'),
//    plumber = require('gulp-plumber');
//    less = require("gulp-less"),
//    browserSync = require("browser-sync"),
//    uglify = require('gulp-uglify'),
//    htmlmin = require('gulp-htmlmin'),
//    rev = require('gulp-rev-append'),
//    clean = require('gulp-clean'),
//    fs = require('fs'),
//    currentDir = String(process.argv[3]).substr(1),
//    path = {
//        HTML : currentDir+'/html/*.html',
//        LESS : currentDir+'/css/*.less',
//        CSS : currentDir+'/css',
//        JS : currentDir+'/js/*.js'
//    };
//
//gulp.task("less", function() {
//    gulp.src(path.LESS)
//        .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))//处理出现异常并不终止watch事件,并提示我们出现了错误
//        .pipe(less())
//        .pipe(gulp.dest(currentDir+'/dist/css'))
//        .pipe(browserSync.stream());
//})
//
//
//gulp.task("js-watch", function() {
//    gulp.src(path.JS)
//        .pipe(browserSync.stream());
//})
//
//gulp.task("html", function() {
//    gulp.src(path.HTML)
//        .pipe(browserSync.stream());
//})
//
//gulp.task("default", ["server"])
//
//gulp.task('uglify', function () {
//
//    var uglifyVar = simbaConfig.build.uglify;
//    if(uglifyVar != null){
//        gulp.src(currentDir+'/js/*.js')
//            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
//            .pipe(uglify({
//                mangle: uglifyVar.mangle,   //类型：Boolean 默认：true 是否修改变量名
//                compress: uglifyVar.compress//类型：Boolean 默认：true 是否完全压缩
//            }))
//            .pipe(gulp.dest(currentDir+'/dist/js'));
//    }else{
//        gulp.src(currentDir+'/js/*.js')
//            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
//            .pipe(gulp.dest(currentDir+'/dist/js'));
//    }
//
//});
//
////如果想添加对CSS的监听,想上面监听less html js 一样
////我既然用了less就不用监听css了
//gulp.task('cssMin',['less'], function () {
//
//    var cssMinVar = simbaConfig.build.cssMin;
//
//    if(cssMinVar != null) {
//        gulp.src(currentDir+'/dist/css/*.css')
//            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
//            .pipe(cssmin({
//                advanced: cssMinVar.advanced,              //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]
//                compatibility: cssMinVar.compatibility,    //类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]
//                keepBreaks: cssMinVar.keepBreaks           //类型：Boolean 默认：false [是否保留换行]
//            }))
//            .pipe(gulp.dest(currentDir+'/dist/css'));
//    }else{
//        gulp.src(currentDir+'/dist/css/*.css')
//            .pipe(gulp.dest(currentDir+'/dist/css'));
//    }
//
//});
//
//gulp.task('htmlMin', function () {
//
//    var htmlMinVar = simbaConfig.build.htmlMin;
//
//    if(htmlMinVar != null) {
//        var options = {
//            removeComments: htmlMinVar.removeComments,                                 //清除HTML注释
//            collapseWhitespace: htmlMinVar.collapseWhitespace,                         //压缩HTML
//            collapseBooleanAttributes: htmlMinVar.collapseBooleanAttributes,           //省略布尔属性的值 <input checked="true"/> ==> <input />
//            removeEmptyAttributes: htmlMinVar.removeEmptyAttributes,                   //删除所有空格作属性值 <input id="" /> ==> <input />
//            removeScriptTypeAttributes: htmlMinVar.removeScriptTypeAttributes,         //删除<script>的type="text/javascript"
//            removeStyleLinkTypeAttributes: htmlMinVar.removeStyleLinkTypeAttributes,   //删除<style>和<link>的type="text/css"
//            minifyJS: htmlMinVar.minifyJS,                                             //压缩页面JS
//            minifyCSS: htmlMinVar.minifyCSS                                            //压缩页面CSS
//        };
//        gulp.src(currentDir+'/html/*.html')
//            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
//            .pipe(htmlmin(options))
//            .pipe(gulp.dest(currentDir+'/dist/html'));
//    }else{
//
//        gulp.src(currentDir+'/html/*.html')
//            .pipe(gulp.dest(currentDir+'/dist/html'));
//    }
//
//});
//
//gulp.task('rev', function () {
//    if(simbaConfig.build.rev != null) {
//        gulp.src(currentDir+'/html/index.html')  //给页面的引用添加版本号，清除页面引用缓存。
//            .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
//            .pipe(rev())                            //<link href="style.css?rev=@@hash"><script src="js.js?rev=@@hash"><img src="img.jpg?rev=@@hash"/>
//            .pipe(gulp.dest(currentDir+'/dist/html'));
//    }else{
//        gulp.src(currentDir+'/html/index.html')  //给页面的引用添加版本号，清除页面引用缓存。
//            .pipe(gulp.dest(currentDir+'/dist/html'));
//    }
//});
//
//gulp.task("server", ["less", "js-watch", "html"], function() {
//    browserSync.init({
//        server : currentDir,
//        directory: true,
//        index: currentDir+'/html/index.htm',
//        port: simbaConfig.localServerPort
//    });
//    gulp.watch(path.LESS, ["less"]);
//    gulp.watch(path.JS, ["js-watch"]);
//    gulp.watch(path.HTML, ["html"]);
//    gulp.watch(path.HTML).on("change", function() {
//        browserSync.reload;
//    });
//});
//
//gulp.task("build", ["uglify", "cssMin", "htmlMin", "rev"], function() {
//    //gulp.run('uglify');
//    //gulp.run('cssMin');
//    //gulp.run('htmlMin');
//    //gulp.run('rev');
//})
//
//gulp.task('clean', function () {
//    return gulp.src(currentDir+'/dist/', {read: false})
//        .pipe(clean());
//});
