/*
 * simba build command
 * */
exports.name = 'build';
exports.usage = '[options]';
exports.desc = '构建本地项目';
exports.register = function (commander) {

	var simba = require('simba-kernel');
	var	gulp = require('gulp'),
		plumber = require('gulp-plumber'),
		runSequence = require('run-sequence'),
		//imagemin = require('gulp-imagemin'),
		//pngquant = require('imagemin-pngquant'),
		strReplace = require('gulp-replace'),
		uglify = require('gulp-uglify'),
		cache = require('gulp-cached'),
		minifyCss = require('gulp-minify-css'),
		//lessHint = require("gulp-lesshint"),
		less = require("gulp-less"),
		stylus = require("gulp-stylus"),
		//jsLint = require('gulp-jslint'),
		jshint = require('gulp-jshint'),
		rename = require('gulp-rename'),
		//clean = require('gulp-clean'),
		postcss  = require('gulp-postcss'),
		autoprefixer = require('autoprefixer'),
		csslint = require('gulp-csslint'),
		gutil = require('gulp-util'),
		cssVersioner = require('gulp-css-url-versioner'),
		htmlConcat = require('gulp-html-concat');
	require('es6-promise').polyfill();
	// output version info
	var first = process.argv[3],
		tempRoot = process.cwd()+'/src';

	if(simba.util.exists(tempRoot) && simba.util.exists(tempRoot+'/config.json')){ //对应simba init初始化，src为根目录的项目

		var root = tempRoot,
			gulpSrcBase = '',
		PATH = {
			HTML : './src/*.html',
			LESS : './src/**/*.less',
			CSS : './src/**/*.css',
			STYLUS : './src/**/*.styl',
			JS : ['./src/**/*.js','!./src/**/less.min.js'],
			DIST: 'dist',
			IMG: './src/**/*.{png,jpg,gif,ico}'
		};

	}else if(!simba.util.exists(tempRoot) && simba.util.exists(process.cwd()+'/config.json')){  //对应没有经过初始化，无src且有config.json的项目

		var root = gulpSrcBase = process.cwd();

	}else if(!simba.util.exists(process.cwd()+'/config.json')){

		simba.log.warning('请配置config.json文件');

	}

	var serverConfig = simba.util.getConfig(root+'/config.json').build;

	gulp.task("uglify", function () {
		var tempSrc = serverConfig.uglify.files.src,
			tempDest = serverConfig.uglify.files.dest;

		var tempSrcPath = (!tempSrc || tempSrc=='')? './**/*.js' : tempSrc;
		var tempDestPath = (!tempDest || tempDest=='')? '': '/'+tempDest; //判断dest属性不存在或者为空
		var tempFinaPath = (tempDest== undefined)?'min':'./';

		if(tempSrcPath instanceof Array){
			tempSrcPath.push('!./**/less.min.js');
		}

		if(!PATH){
			var isOtherProject = true;
			PATH = {
				JS:tempSrcPath,
				DIST:tempFinaPath
			}
		}

		var isUglify = serverConfig.uglify.isUgli;

		var jshintConfig = {
			"undef": true,    //要求所有的非全局变量，在使用前都被声明。
			"unused": true,   //定义但未用到的变量会被警告
			"newcap": true,   //要求每一个构造函数名都要大写字母开头。
			"eqnull":true,   //允许使用"== null"作比较。
			"forin":true,    //允许在for in 循环里面不出现hasOwnProperty，
			"maxerr":20,    //错误最大值
			"freeze":true,  //警告代码中出现重写Array,Date等prototype方法
			"predef": [ "define","jQuery", "$" ]
		};

		function gulpSrcUgli(){   //压缩
			return gulp.src(PATH.JS, { base: gulpSrcBase})
				.pipe(plumber({
					errorHandler: function(err){
						console.log("uglify:"+err);
					}
				}))//处理出现异常并不终止watch事件,并提示我们出现了错误
				.pipe(cache('lintBuilding'))
				.pipe(strReplace(/alert\((("|'?).*?("|'?))\)|console\.log\((("|'?).*?("|'?))\)/g, ''))//删除js中多余的console.log和alert
				.pipe(jshint(jshintConfig))
				//.pipe(jshint.reporter('simba-kernel/lib/jshint'))
				.pipe(uglify({
					mangle: serverConfig.uglify.mangle,   //类型：Boolean 默认：true 是否修改变量名
					compress: serverConfig.uglify.compress//类型：Boolean 默认：true 是否完全压缩
				}))
				.pipe(rename(function (path) {
					if(!isOtherProject){
						return false
					}
					path.dirname += tempDestPath;
					if(path.basename.indexOf("-min") != -1){
						return false
					}
					path.basename += "-min";
					path.extname = ".js";
					return path;
				}))
				.pipe(gulp.dest(PATH.DIST))

		}
		function gulpSrcNoUgli(){  //不压缩
			return gulp.src(PATH.JS, { base: gulpSrcBase})
				.pipe(plumber({
					errorHandler: function(err){
						console.log("noUglify:"+err);
					}
				}))//处理出现异常并不终止watch事件,并提示我们出现了错误
				.pipe(cache('lintBuilding'))
				.pipe(strReplace(/alert\((("|'?).*?("|'?))\)|console\.log\((("|'?).*?("|'?))\)/g, ''))//删除js中多余的console.log和alert
				.pipe(jshint(jshintConfig))
				//.pipe(jshint.reporter('simba-kernel/lib/jshint'))
				.pipe(rename(function (path) {
					if(!isOtherProject){
						return false
					}
					path.dirname += tempDestPath;
					if(path.basename.indexOf("-min") != -1){
						return false
					}
					path.basename += "-min";
					path.extname = ".js";
					return path;
				}))
				.pipe(gulp.dest(PATH.DIST))
		}
		if (isUglify == true) {
			gulpSrcUgli()
		} else {
			gulpSrcNoUgli()
		}

	})

	if (first === '-v' || first === '--version') {
		simba.util.version(__dirname + '/package.json');
		process.exit(0);
	}

	gulp.task("less", function() {
		return gulp.src(PATH.LESS)
			.pipe(plumber({
				errorHandler: function(err){
					console.log(err);
				}
			}))//处理出现异常并不终止watch事件,并提示我们出现了错误
			.pipe(cache('lessBuilding'))
			.pipe(less())
			.pipe(gulp.dest(PATH.DIST))
	});

	gulp.task("stylus", function () {
		return gulp.src(PATH.STYLUS)
			.pipe(cache('stylusBuilding'))
			.pipe(stylus())
			.pipe(gulp.dest(PATH.DIST))
	});

	gulp.task("css", function () {
		return gulp.src(PATH.CSS)
			.pipe(cache('cssBuilding'))
			.pipe(gulp.dest(PATH.DIST))
	})


	gulp.task("cssHander",function(){

		var tempSrc = serverConfig.cssMin.files.src,
			tempDest = serverConfig.cssMin.files.dest;

		var tempSrcPath = (!tempSrc || tempSrc=='')? './**/*.css' : tempSrc;
		var tempDestPath = (!tempDest || tempDest=='')? '': '/'+tempDest; //判断dest属性不存在或者为空
		var tempFinaPath = (tempDest== undefined)?'min':'./';

		if(!PATH){
			var isOtherProject = true,
				pathSrcCss = tempSrcPath,
				pathDestCss = tempFinaPath;
		}else{
			var pathSrcCss = PATH.DIST+'**/*.css',
				pathDestCss = PATH.DIST;
		}

		var customReporter = function(file) {
			gutil.log(gutil.colors.cyan(file.csslint.errorCount)+' errors in '+gutil.colors.magenta(file.path));

			file.csslint.results.forEach(function(result) {
				if(result.error.type == 'error'){
					gutil.log('ERROR! : '.red+result.error.message+' on line '+gutil.colors.cyan(result.error.line));
				}
			});
		};

		//csslint.addRule({
		//	// rule information
		//});
		//return gulp.src(pathSrcCss, { base: gulpSrcBase})
		//	.pipe(postcss([ autoprefixer({ browsers: ['last 5 versions'] }) ]))
		//	.pipe(csslint({
		//		'shorthand': false
		//	}))
		//	.pipe(csslint.reporter(customReporter))
		//	.pipe(cssVersioner({version: simba.util.md5(Math.random(),10)}))
		//	.pipe(minifyCss({compatibility: 'ie8'}))
		//	.pipe(rename(function (path) {
		//		if(!isOtherProject){
		//			return false
		//		}
		//		path.dirname += tempDestPath;
		//		if(path.basename.indexOf("-min") != -1){
		//			return false
		//		}
		//		path.basename += "-min";
		//		path.extname = ".css";
		//		return path;
		//	}))
		//	.pipe(gulp.dest(pathDestCss))
		return gulp.src(PATH.DIST+'**/*.css', { base: gulpSrcBase})
			.pipe(postcss([ autoprefixer({ browsers: ['last 5 versions'] }) ]))
			.pipe(csslint({
				'shorthand': false
			}))
			.pipe(csslint.reporter(customReporter))
			.pipe(cssVersioner({version: simba.util.md5(Math.random(),10)}))
			.pipe(minifyCss({compatibility: 'ie8'}))
			.pipe(rename(function (path) {
				if(!isOtherProject){
					return false
				}
				path.dirname += tempDestPath;
				if(path.basename.indexOf("-min") != -1){
					return false
				}
				path.basename += "-min";
				path.extname = ".css";
				return path;
			}))
			.pipe(gulp.dest(PATH.DIST))
	})

	//gulp.run("cssHander");
	gulp.task('imageMin', function () {
		var imageminConfig = {
		};

		return gulp.src('./src/**/*.{png,jpg}')
			.pipe(cache('imgBuilding'))
			//.pipe(tinyimg('Pnp2Ha1KB_cSPOnKPFV0juL3xIGU8Us6'))
			.pipe(gulp.dest(PATH.DIST));
	})

	gulp.task("html", function () {
		gulp.src(PATH.HTML)
			.pipe(cache('htmlBuilding'))
			.pipe(strReplace(/\.less|sheet\/less|<script.*?less\.min\.js.*?<\/script>|\.styl/gi, function(str){
				if(str == 'sheet/less'){
					str = 'sheet';
				}else if(str == '.less' || str == '.styl'){
					str = '.css';
				}else{
					str = '';
				}
				return str
			}))
			.pipe(gulp.dest(PATH.DIST))
	})

	gulp.task("htmlconcat", function () {
		return gulp.src(["./report/*.html","!./report/js-report-index.html"])
			.pipe(htmlConcat("report-jshint-index.html"))
			.pipe(gulp.dest("./report/"))
	})

	//gulp.task('default', ['html','less','stylus','uglify','concat', 'rev']);

	gulp.task('Clean', function () {
		gulp.src(PATH.DIST, {read: false})
			.pipe(clean())
	});
	gulp.task('build', function (done) {
		runSequence(
			['less','stylus','css'],
			['html','uglify'],
			['imageMin'],
			['htmlconcat','cssHander'],
			done);
	});
	//gulp.run('Clean')
	gulp.run('build')
	//simba.log.warning('开发中');
	//return false;

};