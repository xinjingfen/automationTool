/*
 * simba init command
 * */
var fs = require('fs');
var path = require('path');

Date.prototype.format=function(formatStr, fdate)
{
	var fTime, fStr = 'ymdhis';
	if (!formatStr)
		formatStr= "y-m-d h:i:s";
	if (fdate)
		fTime = new Date(fdate);
	else
		fTime = new Date();
	var formatArr = [
		fTime.getFullYear().toString(),
		(fTime.getMonth()+1).toString(),
		fTime.getDate().toString(),
		fTime.getHours().toString(),
		fTime.getMinutes().toString(),
		fTime.getSeconds().toString()
	]
	for (var i=0; i<formatArr.length; i++)
	{
		formatStr = formatStr.replace(fStr.charAt(i), formatArr[i]);
	}
	return formatStr;
};

exports.name = 'init';
exports.usage = '[options]';
exports.desc = '快速初始化项目';
exports.register = function (commander) {

	var projectName, hasBranches, template,
		simba = require('simba-kernel'),
		root = process.cwd(),
		inquirer = require('inquirer');


	// output version info
	var first = process.argv[3];
	if (first === '-v' || first === '--version') {
		simba.util.version(__dirname + '/package.json');
		process.exit(0);
	}


	var yesOrNoArr = ['yes', 'no'];
	var templateArr = ['default'], tplDir = path.dirname(path.dirname(require.main.filename)) + '/lib/templates';

	//read custom template
	try {
		var paths = fs.readdirSync(tplDir);
		paths.forEach(function (path) {
			var _src = tplDir + '/' + path;
			fs.stat(_src, function (err, st) {
				if (err) {
					throw err;
				}
				if (st.isDirectory() && !simba.util.inArray(path, templateArr)) {
					templateArr.push(path);
				}
			});
		});
	} catch (e) {
		simba.log.error('templates lost');
		return false;
	}

	// init custom info
	function initPrompt() {
		inquirer.prompt([
			{
				type: 'input',
				name: 'name',
				default: 'demo',
				message: 'Project name',
				validate: function (val) {
					var done = this.async();
					var targetDir = root + '/' + val;
					var exists = fs.existsSync(targetDir);
					// Do async stuff
					setTimeout(function () {
						if (/[^0-9a-z\-\_]/i.test(val)) {
							done("Can contain only letters, digits, hyphen, and underline, input again");
							return;
						} else if (exists) {
							// Pass the return value in the done callback
							done("Folder already exists, input again");
							return;
						}
						// Pass the return value in the done callback
						done(true);
					}, 600);
				}
			},
			{
				type: 'confirm',
				name: 'branches',
				choices: yesOrNoArr,
				default: 'no',
				validate: function (val) {
					return simba.util.inArray(val, yesOrNoArr);
				},
				message: 'Has branches [' + yesOrNoArr.join('/') + ']?'
			},
			{
				type: 'list',
				name: 'template',
				choices: templateArr,
				default: 'default',
				validate: function (val) {
					return simba.util.inArray(val, templateArr);
				},
				message: 'Template'
			}
		], function (opts) {
			simba.util.extend(opts, {root: root});
			initAction(opts);
		})
	}

	// quick init
	function quickInit(val) {
		var targetDir = root + '/' + val;
		var exists = fs.existsSync(targetDir);
		if (/[^0-9a-z\-\_]/i.test(val)) {
			simba.log.warning("Can contain only letters, digits, hyphen, and underline, input again");
			process.exit(0);
		} else if (exists) {
			// Pass the return value in the done callback
			simba.log.warning("Folder already exists, input again");
			process.exit(0);
		}

		var opts = {
			name: val,
			branches: 'no',
			template: 'default'
		};

		simba.util.extend(opts, {root: root});
		initAction(opts);
	}

	// init action
	function initAction(opts) {
		checkDir(opts);
		addProject(opts);
		writePackage(opts);
	}

	commander.action(function () {
		if (first) {
			quickInit(first);
		} else {
			initPrompt();
		}
	});

	// checkDir
	function checkDir(opts) {
		if(opts.branches == true){
			opts.path = opts.name + '/1.0/src';
		}else{
			opts.path = opts.name + '/src';
		}
		var targetDir = root + '/' + opts.path;
		// check dir exists
		var exists = fs.existsSync(targetDir);
		if (!exists) {
			mkdirsSync(targetDir);
		}
	}
	//创建多层文件夹 同步
	function mkdirsSync(dirpath, mode) {
		if (!fs.existsSync(dirpath)) {
			var pathtmp;
			//path.sep
			dirpath.split("/").forEach(function(dirname) {
				if (pathtmp) {
					pathtmp = path.join(pathtmp, dirname);
				}
				else {
					pathtmp = dirname;
				}
				if (!fs.existsSync(pathtmp)) {
					if (!fs.mkdirSync(pathtmp, mode)) {
						return false;
					}
				}
			});
		}
		return true;
	}
	//write package
	function writePackage(opts) {

		//write packagejson
		var packageJsonXml =
			'{\n'
				+ '\t"name": '
				+ '"' + opts.name + '"'
				+ ",\n"
				+ '\t"version": '
				+ '"0.0.0"'
				+ ",\n"
				+ '\t"branches": '
				+ '"' + opts.branches + '"'
				+ ",\n"
				+ '\t"template": '
				+ '"' + opts.template + '"'
				+ '\n'
				+ '}\n';

		fs.writeFile(root + '/' + opts.path + '/package.json', packageJsonXml, function (err) {
			if (err)
				throw err;
		});

	}

	//path add project
	function addProject(opts) {
		var thisPath = path.dirname(path.dirname(process.argv[1])) + '/lib/templates/' + opts.template;
		var acTionPath = opts.root + "/" + opts.path;
		var appinfo = simba.util.readJSON(path.dirname(path.dirname(__dirname)) + '/package.json');
		// copy files
		var data = {
			name: opts.name,
			APP_NAME: appinfo.name,
			APP_VERSION: appinfo.version,
			CREATE_TIME: simba.util.localDate().format('UTC:YYYY-MM-DD hh:mm:ss'),
			CREATE_DATE: simba.util.localDate().format('UTC:YYYY.MM.DD')
		};
		simba.util.copyDir(thisPath, acTionPath, data);

		/*
		 * 建立 .mock 文件夹
		 * */
		var mockDir = path.join(root, opts.path + '/.mock');
		if (!simba.util.exists(mockDir)) {
			fs.mkdirSync(mockDir);
		}
		// 写入配置文件
		if (!simba.util.exists(mockDir + '/conf.json')) {
			var confStr = [
				'{',
				'\t"cookie": {',
				'\t',
				'},',
				'\t"/mock/test": "./test.js"',
				'}'
			];
			var testJsStr = [
				'This is a test.'
			];
			fs.writeFileSync(mockDir + '/conf.json', confStr.join('\n'));
			fs.writeFileSync(mockDir + '/test.js', testJsStr.join('\n'));
		}

		simba.log.ok('Init success');
	}
};